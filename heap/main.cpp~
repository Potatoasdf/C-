#include <iostream>
#include <cstring>
#include <cmath>

using namespace std;

void print(int* heap, int location, int space);
void sort(int* heap, int count, int layer);
void sortSwitch(int* heap, int i, int layer, int top, int last);
int main()
{
  int layer = 0;
  int* heap = new int[200];
  for (int i = 0; i < 200; i++)
    {
      heap[i] = 0;
    }
  bool alive = true;
  while(alive)
    {
      char input[10];
      cout << "ADD, GEN, DEL, CLEAR, PRINT, QUIT" << endl;
      cin >> input;
      
      if(strcmp(input, "ADD") == 0)
	{
	  int intput;
	  cin >> intput;
	  int count = 0;
	  while(heap[count] != 0)
	    {
	      cout << heap[count] << endl;
	      count++;
	      
	    }
	  heap[count] = intput;

	  if (2*(pow(2, layer)) == count + 1)
	    {
	      layer++;
	    }
	  cout << count << endl;
	  cout << layer << endl;
	  //sort(heap, count, layer);
	}
      else if(strcmp(input, "PRINT") == 0)
	{
	  print(heap, 1, 0);
	}
      else
	{
	  cout << "pls give actually input" << endl;
	}
    }
  
  return 0;
}
void sort(int* heap, int count, int layer)
{
  if(heap[int(round((count -1) / 2))] < heap[count])
    { 
      int holder = heap[count];
      heap[count] = heap[int(round((count -1) / 2))];
      heap[int(round((count -1) / 2))] = holder;
      sort(heap, int(round((count -1) / 2)), layer -1);
    }
}
void sortSwitch(int* heap, int i, int layer, int top, int last)
{
  /*  else if(i > 1)
    {
      if(heap[int(round((i-1)/2))] < heap[i])
	{
	  int holder = heap[i];
	  heap[i] = heap[int(round((i-1)/2))];
	  heap[int(round((i-1)/2))] = holder;
	  print(heap, 1, 0);
	  
	  sortSwitch(heap, int(round((i-1)/2)), layer - 1, top, last);
	}
    }
  else
    {
      
    }*/
}
// stolen from my brothers code
void print(int* heap, int location, int space)
{
  //if stop adding space if no more vars to cout
  if(heap[location] == 0)
    {
      return;
    }
  space += 10;

  print(heap, location*2, space);

  cout << "\n" <<endl;
  for(int i = 10; i < space;i++)
    {
      cout << " ";
    }
  cout << heap[location] << "\n";
  print(heap, location*2+1, space);
}
